group 'IVS'
version '2.0'

apply plugin: 'java'
apply plugin: 'war'

repositories {
    mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
    // servlet相关
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'javax.servlet:jstl:1.2'
    compile 'javax.servlet.jsp:jsp-api:2.2'
    compile 'org.apache.taglibs:taglibs-standard-impl:1.2.5'
    // Spring相关
    compile 'org.springframework:spring-webmvc:4.3.2.RELEASE'
    compile 'org.springframework:spring-jdbc:4.3.2.RELEASE'
    compile 'org.springframework:spring-test:4.3.2.RELEASE'
    compile 'org.aspectj:aspectjweaver:1.8.9'
    // 数据库相关
    compile 'org.apache.tomcat:tomcat-jdbc:9.0.0.M11'
    compile 'mysql:mysql-connector-java:6.0.5'
    // mybatis相关
    compile 'org.mybatis:mybatis:3.4.1'
    compile 'org.mybatis:mybatis-spring:1.3.0'
    compile 'com.github.pagehelper:pagehelper:4.1.6'
    // JSON相关
    compile 'com.alibaba:fastjson:1.2.20'
    // 日志相关
    compile 'log4j:log4j:1.2.17'

    // 测试相关
    testCompile 'org.springframework:spring-test:4.3.2.RELEASE'
    testCompile 'junit:junit:4.11'

    // mybatisGenerator
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:6.0.5'
}

// 加载配置文件
ext {
    def prop = new Properties();
    file("src/main/resources/jdbc.properties").withInputStream {
        prop.load(it)
    }
    file("src/main/resources/mybatis/gradle.properties").withInputStream {
        prop.load(it)
    }
    prop.each {
        project.extensions.add("$it.key", it.value);
    }
}

task mybatisGenerate << {
    ant.properties['targetProject'] = projectDir.path
    ant.properties['jarDirection'] = project['jdbc.jarDirection']
    ant.properties['driverClass'] = project['jdbc.driverClassName']
    ant.properties['connectionURL'] = project['jdbc.url']
    ant.properties['userId'] = project['jdbc.user']
    ant.properties['password'] = project['jdbc.password']
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = project['modelPackage']
    ant.properties['mapperPackage'] = project['mapperPackage']
    ant.properties['sqlMapperPackage'] = project['sqlMapperPackage']

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )

    println configurations.mybatisGenerator.asPath

    ant.mbgenerator(overwrite: true, configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'jarDirection')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'userId')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}


